* Note interessanti / Link Utili
  - https://pdfs.semanticscholar.org/0d03/82bf09f3054b957e4cc2271b3db4ab492260.pdf
  - https://www.jair.org/media/298/live-298-1558-jair.pdf
  - https://en.wikipedia.org/wiki/Truth_table
  - http://homepage.sns.it/lolli/dispense00/corso1.pdf
  - https://en.wikipedia.org/wiki/Dynamic_programming
  - http://www.ce.unipr.it/research/HYPERPROLOG/logmatintro.html
  - [[https://www.doc.ic.ac.uk/~shm/ilp_theory.html#inverse_resolution]]

** Implementazione di un risolutore
   - https://en.wikipedia.org/wiki/Boolean_satisfiability_problem
     - https://en.wikipedia.org/wiki/Chaff_algorithm
       - http://www.princeton.edu/~chaff/publication/DAC2001v56.pdf
     - https://en.wikipedia.org/wiki/GRASP_(SAT_solver)
     - https://en.wikipedia.org/wiki/Local_search_(constraint_satisfaction)
     - https://en.wikipedia.org/wiki/WalkSAT
     - https://en.wikipedia.org/wiki/Binary_decision_diagram
   - https://en.wikipedia.org/wiki/Davis%E2%80%93Putnam_algorithm
     - https://en.wikipedia.org/wiki/DPLL_algorithm
     - https://en.wikipedia.org/wiki/Unit_propagation
   - https://en.wikipedia.org/wiki/Conflict-Driven_Clause_Learning ( modern evolution of DPLL algorithm, state of the art in 2014)
   - http://logictools.org/propositional.html ( Good link to get started on reading )
   - http://minisat.se/
   - http://minisat.se/downloads/MiniSat.pdf
   - http://www.satcompetition.org/
   - [[https://en.wikipedia.org/wiki/SLD_resolution]]

** DPLL Implementation
- http://www.dis.uniroma1.it/~liberato/ar/dpll/dpll.html
- http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.380.2837&rep=rep1&type=pdf
- https://stackoverflow.com/questions/12547160/how-does-the-dpll-algorithm-work
- https://cs.stackexchange.com/questions/10932/understanding-dpll-algorithm?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa

** AST Generation:

  - https://en.wikipedia.org/wiki/Shunting-yard_algorithm ( READ )
  - http://wcipeg.com/wiki/Shunting_yard_algorithm ( READ )
  
*** Impelementation Notes: ( READ, NOT SO USEFULL )
    - https://stackoverflow.com/questions/42683665/modify-the-shunting-yard-algorithm-to-include-a-wall-operator ( READ )
    - https://softwareengineering.stackexchange.com/questions/290043/precedence-of-function-in-shunting-yard-algorithm ( READ )

    - http://reedbeta.com/blog/the-shunting-yard-algorithm/ ( READ )
    - https://softwareengineering.stackexchange.com/questions/290916/incorporating-functions-into-a-shunting-yard-algorithm-implementation?rq=1  ( READ )

  - https://en.wikipedia.org/wiki/Recursive_descent_parser ( PROPER WAY TO IMPLEMENT THE PARSER: NOT THE CASE FOR THIS PROJECT )

* zChaff Papers
- https://www.princeton.edu/~chaff/publication.html
- http://www.princeton.edu/~chaff/publication/DAC2001v56.pdf
- https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7225110
- https://www.princeton.edu/~chaff/publication/iccad2001_final.pdf
